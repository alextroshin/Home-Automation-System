version: "2.0"
volumes:
  mongo-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./mongo/data
  postgresql-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./postgresql/data
  mysql-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./mysql/data
  policy-enforcement-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./policy-enforcement-service
services:
  rabbitmq:
    image: rabbitmq:3.12.8-management-alpine
    ports:
      - 5672:5672
      - 15672:15672
  mongo:
    image: mongo:6.0
    volumes:
      - mongo-data:/data/db
      - ./mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    ports:
      - "27017:27017"
      - "27018:27018"
      - "27019:27019"
    environment:
      - MONGO_INITDB_DATABASE=home-automation
  postgresql:
    image: postgres:12
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: home-automation
      POSTGRES_USER: home-automation
      POSTGRES_DB: home-automation
      PGDATA: /var/lib/postgresql/data/db-files/
    ports:
      - 5432:5432
  mysql:
    image: mysql:8
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - mysql-data:/var/lib/mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
      MYSQL_USER: home-automation
      MYSQL_PASSWORD: home-automation
      MYSQL_DATABASE: home-automation
  memcached:
    image: memcached:1.6.17
    ports:
        - "11211:11211"
    command: ["memcached"]
  policy-enforcement-service:
    build:
      context: ../services/policy-enforcement-service
      dockerfile: ./Dockerfile
    ports:
    - "5000:5000"
    volumes:
      - policy-enforcement-data:/mnt/
    environment:
      JWT_SECRET: ${JWT_SECRET}
      POLICIES_CONFIG_PATH: ${POLICIES_CONFIG_PATH}
  device-management-service:
    build:
      context: ../services/device-management-service
      dockerfile: ./Dockerfile
    ports:
    - "5001:5000"
    environment:
      POSTGRES_DSN: ${POSTGRES_DSN}
    depends_on:
      - postgresql
  user-service:
    build:
      context: ../services/user-service
      dockerfile: ./Dockerfile
    ports:
    - "5002:5000"
    environment:
      POSTGRES_DSN: ${POSTGRES_DSN_ASYNC}
      JWT_SECRET: ${JWT_SECRET}
      RESET_PASSWORD_TOKEN_SECRET: ${RESET_PASSWORD_TOKEN_SECRET}
      VERIFICATION_TOKEN_SECRET: ${VERIFICATION_TOKEN_SECRET}
    depends_on:
      - postgresql